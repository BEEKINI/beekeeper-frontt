name: Build & Deploy Angular App

on:
  push:
    branches:
      - '**'  # D√©clenchement sur toutes les branches

jobs:
  test-build:
    name: Test Build Angular
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Activer Corepack et pr√©parer Yarn stable
        run: |
          npm install -g corepack
          corepack enable
          yarn set version stable

      - name: V√©rifier et configurer Yarn
        run: yarn config set nodeLinker node-modules

      - name: V√©rifier si yarn.lock est pr√©sent
        run: test -f yarn.lock || yarn install --check-cache --update-checksums

      - name: Installer les d√©pendances
        run: yarn install --immutable

      - name: Build Angular app
        run: yarn ng build --configuration=production

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t valerianc/bee-keeper:latest .

      - name: Push Docker image
        run: docker push valerianc/bee-keeper:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add SSH key and known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "üîç V√©rification de l'installation de Docker et Docker Compose..."
          if ! command -v docker &> /dev/null; then
            echo "‚ùå Docker n'est pas install√©. Installation en cours..."
            curl -fsSL https://get.docker.com | sh
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "‚ùå Docker Compose n'est pas install√©. Installation en cours..."
            sudo apt-get install -y docker-compose
          fi

          echo "üì¶ Mise √† jour et red√©marrage du conteneur..."
          cd /home/ubuntu/Beekeeper
          docker-compose pull
          docker-compose up -d --force-recreate
          
          echo "‚úÖ D√©ploiement termin√©. Liste des conteneurs actifs :"
          docker ps
          EOF
